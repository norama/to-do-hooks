{"version":3,"sources":["components/styles.js","components/AddItem.js","components/Datetime.js","data/ToDoItem.js","components/ItemRow.js","components/Timer.js","components/ItemList.js","components/Main.js","serviceWorker.js","index.js"],"names":["GLOBAL_STYLE","backgroundColor","bodyColor","StyledH1","styled","H1","_templateObject","p","theme","fontFamily","StyledH2","H2","_templateObject2","StyledButton","Button","_templateObject3","StyledTextarea","Textarea","_templateObject4","StyledItemList","div","_templateObject5","StyledCheckboxWrapper","_templateObject6","StyledCheckbox","Input","_templateObject7","StyledItemHeader","Row","_templateObject8","StyledItemRow","props","margin","remind","border","StyledDatetimeWrapper","_templateObject9","StyledDatetime","_templateObject10","StyledDisabledDatetime","_templateObject11","StyledDisabledInput","input","_templateObject12","AddItem","_ref","onAdd","_useState","useState","_useState2","Object","slicedToArray","value","setValue","react_default","a","createElement","v4_esm","md","onChange","e","target","onClick","format","datetime","DatetimePicker","datetimeShortcuts","Today","moment","Tomorrow","add","Clear","rc_datetime_picker_cjs","shortcuts","minDate","type","readOnly","Datetime","_ref2","disabled","ToDoItem","text","done","arguments","length","undefined","classCallCheck","this","_text","_done","_datetime","_id","uuid","ItemRow","item","onRemindFinished","useEffect","toast","info","substring","summary","reminder","reminderContent","onOpen","document","getElementById","id","scrollIntoView","behavior","onClose","position","POSITION","TOP_LEFT","autoClose","handleTextChange","Datetime_DatetimePicker","defaultValue","checked","width","height","cursor","Datetime_Datetime","Timer","callback","period","intervalRef","useRef","setInterval","current","clearInterval","propTypes","PropTypes","func","isRequired","number","ItemListHeader","ItemList","items","onRemind","remindItemId","find","ItemList_ItemListHeader","map","components_ItemRow","key","components_Timer","lookaheadTime","process","reminderItems","filter","isBefore","Main","setItems","_useState3","_useState4","remindItems","setRemindItems","handleChange","newItem","index","findIndex","newItems","toConsumableArray","Fragment","components_AddItem","concat","components_ItemList","lib","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","src_templateObject","ReactDOM","render","styled_components_browser_esm","components_Main","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ad7c77c.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport { Row, Input, H1, H2, Button, Textarea } from \"@bootstrap-styled/v4\";\r\n\r\nexport const GLOBAL_STYLE = {\r\n    backgroundColor: \"lightgrey\",\r\n    bodyColor: \"#222\"\r\n};\r\n\r\nexport const StyledH1 = styled(H1)`\r\n    margin: 1em auto;\r\n    text-align: center;\r\n    font-size: 2em;\r\n    font-weight: 600;\r\n    font-family: ${p => p.theme.fontFamily}\r\n`;\r\n\r\nexport const StyledH2 = styled(H2)`\r\n    && {\r\n        text-align: center;\r\n        font-size: 1em;\r\n        font-weight: 700;\r\n        font-family: ${p => p.theme.fontFamily}\r\n    }\r\n`;\r\n\r\n\r\nexport const StyledButton = styled(Button)`\r\n    margin: 1em auto 1em 6px;\r\n    && {\r\n        font-weight: 600;\r\n    }\r\n`;\r\n\r\nexport const StyledTextarea = styled(Textarea)`\r\n    width: 100%;\r\n    height: 100%;\r\n    padding: 1em;\r\n    line-height: 1.5em;\r\n`;\r\n\r\nexport const StyledItemList = styled.div`\r\n    margin-top: 50px;\r\n    width: 100%;\r\n`;\r\n\r\nexport const StyledCheckboxWrapper = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n`;\r\n\r\nexport const StyledCheckbox = styled(Input)`\r\n    width: 25px;\r\n    height: 25px;\r\n    margin: auto;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const StyledItemHeader = styled(Row)`\r\n    && {\r\n        margin: 20px;\r\n    }\r\n`;\r\n\r\nexport const StyledItemRow = styled(Row)(props => ({\r\n    margin: '20px !important',\r\n    backgroundColor: props.remind ? '#41A3E2' : GLOBAL_STYLE.backgroundColor,\r\n    border: props.remind ? '10px solid #41A3E2' : 'none'\r\n}));\r\n\r\n\r\n\r\nexport const StyledDatetimeWrapper = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n`;\r\n\r\nexport const StyledDatetime = styled.div`\r\n    margin: auto;\r\n`;\r\n\r\nexport const StyledDisabledDatetime = styled.div`\r\n    margin: auto;\r\n`;\r\n\r\nexport const StyledDisabledInput = styled.input`\r\n    background-color: #EBEBE4;\r\n    border: 1px solid darkgrey;\r\n`;","import React from 'react';\r\n\r\nimport { Row, Col } from \"@bootstrap-styled/v4\";\r\n\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { StyledButton, StyledTextarea } from './styles';\r\n\r\nconst AddItem = ({ onAdd }) => {\r\n\r\n    const [value, setValue] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const handleAdd = () => {\r\n        onAdd(value);\r\n        setValue('');\r\n    };\r\n    \r\n    return (\r\n        <Row>\r\n            <Col md={4}></Col>\r\n            <Col md={4}><StyledTextarea value={value} onChange={handleChange} /></Col>\r\n            <Col md={4}><StyledButton onClick={handleAdd}>ADD</StyledButton></Col>\r\n        </Row>\r\n    )\r\n};\r\n\r\nAddItem.propTypes = {\r\n    onAdd: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport moment from 'moment';\r\n\r\nimport { DatetimePickerTrigger } from 'rc-datetime-picker';\r\nimport 'rc-datetime-picker/dist/picker.min.css';\r\n\r\nimport { StyledDisabledInput } from './styles';\r\n\r\nconst format = (datetime) => (\r\n    datetime ? ' ' + datetime.format('DD.MM.YYYY HH:mm') : ''\r\n);\r\n\r\nexport const formatDatetime = (datetime) => (datetime.format('DD.MM.YYYY HH:mm'));\r\n\r\nexport const DatetimePicker = ({ datetime, onChange }) => {\r\n\r\n    const datetimeShortcuts = {\r\n        'Today': moment(),\r\n        'Tomorrow': moment().add(1, 'days'),\r\n        'Clear': null\r\n    };\r\n\r\n    return (\r\n        <DatetimePickerTrigger\r\n            shortcuts={datetimeShortcuts} \r\n            moment={datetime ? datetime : moment()}\r\n            minDate={moment()}\r\n            onChange={onChange}>\r\n\r\n            <input type=\"text\" value={format(datetime)} readOnly />\r\n\r\n        </DatetimePickerTrigger>\r\n    );\r\n};\r\n\r\nDatetimePicker.propTypes = {\r\n    datetime: PropTypes.instanceOf(moment),\r\n    onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport const Datetime = ({ datetime }) => (\r\n    <DatetimePickerTrigger\r\n        moment={datetime}\r\n        disabled={true}\r\n    >\r\n        <StyledDisabledInput type=\"text\" value={format(datetime)} readOnly />\r\n\r\n    </DatetimePickerTrigger>\r\n);\r\n\r\nDatetime.propTypes = {\r\n    datetime: PropTypes.instanceOf(moment)\r\n};\r\n","import uuid from 'uuid/v4';\r\nimport moment from 'moment';\r\n\r\nclass ToDoItem {\r\n\r\n    _text = '';\r\n\r\n    _done = false;\r\n\r\n    // completion time if done,\r\n    // reminder time otherwise\r\n    _datetime = null;\r\n\r\n    _id = uuid();\r\n\r\n    constructor(text, done=false, datetime=null) {\r\n        this._text = text;\r\n        this._done = done;\r\n        this._datetime = datetime;\r\n    }\r\n\r\n    id() {\r\n        return this._id;\r\n    }\r\n\r\n    text(text) {\r\n        if (text === undefined) {\r\n            return this._text;\r\n        }\r\n        this._text = text;\r\n        return this;\r\n    }\r\n\r\n    done(done) {\r\n        if (done === undefined) {\r\n            return this._done;\r\n        }\r\n        return new ToDoItem(this._text, done, done ? moment() : null);\r\n    }\r\n\r\n    datetime(datetime) {\r\n        if (datetime === undefined) {\r\n            return this._datetime;\r\n        }\r\n        return new ToDoItem(this._text, this._done, datetime);\r\n    }\r\n\r\n    reminder() {\r\n        return this.done() ? null : this.datetime();\r\n    }\r\n}\r\n\r\nexport default ToDoItem;","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { Col } from \"@bootstrap-styled/v4\";\r\n\r\nimport { StyledItemRow, StyledCheckboxWrapper, StyledCheckbox, StyledTextarea } from './styles';\r\nimport { StyledDatetimeWrapper, StyledDatetime, StyledDisabledDatetime } from './styles';\r\n\r\nimport { DatetimePicker, Datetime } from './Datetime';\r\nimport ToDoItem from '../data/ToDoItem';\r\n\r\nimport { formatDatetime } from './Datetime';\r\n\r\nconst summary = (item) => {\r\n    const text = item.text();\r\n    return text.length < 10 ? text : text.substring(0, 10) + \" ...\";\r\n};\r\n\r\nconst reminderContent = (item) => (\r\n    \"Reminder for TODO (\"+summary(item)+\") due at: \"+formatDatetime(item.reminder())\r\n);\r\n\r\nconst ItemRow = ({ item, onChange, remind, onRemindFinished }) => {\r\n\r\n    useEffect(() => {\r\n\r\n        const reminder = () => {\r\n            toast.info(reminderContent(item), {\r\n                onOpen: () => {\r\n                    const element = document.getElementById(item.id());\r\n                    element.scrollIntoView({ behavior: \"smooth\" });\r\n                },\r\n                onClose: () => {\r\n                    onRemindFinished(item.id(), item.datetime(null));\r\n                },\r\n                position: toast.POSITION.TOP_LEFT,\r\n                autoClose: 30000\r\n            });\r\n        };\r\n\r\n        if (remind) {\r\n            reminder();\r\n        }\r\n\r\n    }, [remind]);\r\n\r\n    const handleDoneChange = () => {\r\n        const done = !item.done();\r\n        onChange(item.id(), item.done(done));\r\n    };\r\n\r\n    const handleTextChange = (e) => {\r\n        const text = e.target.value;\r\n        item.text(text);\r\n    };\r\n\r\n    const handleReminderChange = (datetime) => {\r\n        onChange(item.id(), item.datetime(datetime));\r\n    };\r\n\r\n    return (\r\n        <StyledItemRow id={item.id()} remind={remind}>\r\n            <Col md={2}>\r\n                { !item.done() ? (\r\n                    <StyledDatetimeWrapper>\r\n                        <StyledDatetime>\r\n                            <DatetimePicker datetime={item.datetime()} onChange={handleReminderChange} />\r\n                        </StyledDatetime>\r\n                    </StyledDatetimeWrapper>\r\n                ) : null }\r\n            </Col>\r\n\r\n            <Col md={3}>\r\n                { !item.done() ? (\r\n                    <StyledTextarea defaultValue={item.text()} onChange={handleTextChange} />\r\n                ) : null }\r\n            </Col>\r\n\r\n            <Col md={2}>\r\n                <StyledCheckboxWrapper>\r\n                    <StyledCheckbox type=\"checkbox\" checked={item.done()} onChange={handleDoneChange} width=\"25px\" height=\"25px\" cursor=\"pointer\"/>\r\n                </StyledCheckboxWrapper>\r\n            </Col>\r\n\r\n            <Col md={3}>\r\n                { item.done() ? (\r\n                    <StyledTextarea value={item.text()} onChange={handleTextChange} disabled />\r\n                ) : null }\r\n            </Col>\r\n\r\n            <Col md={2}>\r\n                { item.done() ? (\r\n                    <StyledDatetimeWrapper>\r\n                        <StyledDisabledDatetime>\r\n                            <Datetime datetime={item.datetime()} />\r\n                        </StyledDisabledDatetime>\r\n                    </StyledDatetimeWrapper>\r\n                ) : null }\r\n            </Col>\r\n        </StyledItemRow>\r\n    );\r\n};\r\n\r\nItemRow.propTypes = {\r\n    item: PropTypes.instanceOf(ToDoItem).isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    remind: PropTypes.bool,\r\n    onRemindFinished: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ItemRow;","import React from 'react';\r\nimport { useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/*\r\n * https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables\r\n */\r\nconst Timer = ({ callback, period }) => {\r\n    const intervalRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const id = setInterval(() => {\r\n            callback();\r\n        }, period);\r\n        intervalRef.current = id;\r\n        return () => {\r\n            clearInterval(intervalRef.current);\r\n        };\r\n    });\r\n\r\n    return null;\r\n};\r\n\r\nTimer.propTypes = {\r\n    callback: PropTypes.func.isRequired,\r\n    period: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport moment from 'moment';\r\n\r\nimport { Col } from \"@bootstrap-styled/v4\";\r\n\r\nimport ItemRow from './ItemRow';\r\n\r\nimport { StyledItemList, StyledItemHeader, StyledH2 } from './styles';\r\n\r\nimport Timer from './Timer';\r\n\r\nimport ToDoItem from '../data/ToDoItem';\r\n\r\nconst LOOKUP = process.env.REACT_APP_REMINDER_LOOKUP * 60 * 1000; // in ms\r\nconst LOOKAHEAD = process.env.REACT_APP_REMINDER_LOOKAHEAD;\r\n\r\nconst ItemList = ({ items, onChange, onRemind, remindItemId, onRemindFinished }) => {\r\n\r\n    useEffect(() => {\r\n\r\n        if (remindItemId && !items.find((item) => (item.id() === remindItemId))) {\r\n            onRemindFinished(remindItemId, null);\r\n        }\r\n\r\n    }, [items, remindItemId]);\r\n\r\n    const handleReminders = () => {\r\n        const lookaheadTime = moment().add(LOOKAHEAD, 'minutes');\r\n        const reminderItems = items.filter((item) => {\r\n            const reminder = item.reminder();\r\n            return reminder && reminder.isBefore(lookaheadTime);\r\n        });\r\n        onRemind(reminderItems);\r\n    };\r\n\r\n    return (\r\n        <StyledItemList>\r\n            <ItemListHeader />\r\n                {items.map((item) => (\r\n                    <ItemRow\r\n                        item={item}\r\n                        onChange={onChange}\r\n                        remind={item.id() === remindItemId}\r\n                        onRemindFinished={onRemindFinished}\r\n                        key={item.id()}\r\n                    />))}\r\n            <Timer callback={handleReminders} period={LOOKUP} />\r\n        </StyledItemList>\r\n    );\r\n};\r\n\r\nItemList.propTypes = {\r\n    items: PropTypes.arrayOf(PropTypes.instanceOf(ToDoItem)).isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    onRemind: PropTypes.func.isRequired,\r\n    remindItemId: PropTypes.string,\r\n    onRemindFinished: PropTypes.func.isRequired\r\n};\r\n\r\nconst ItemListHeader = () => (\r\n    <StyledItemHeader>\r\n        <Col md={2}><StyledH2>Reminder</StyledH2></Col>\r\n        <Col md={3}><StyledH2>ToDo</StyledH2></Col>\r\n        <Col md={2}><StyledH2>Mark as Done</StyledH2></Col>\r\n        <Col md={3}><StyledH2>Done</StyledH2></Col>\r\n        <Col md={2}><StyledH2>Completion Time</StyledH2></Col>\r\n    </StyledItemHeader>\r\n);\r\n\r\nexport default ItemList;","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport AddItem  from './AddItem';\r\nimport ItemList from './ItemList';\r\n\r\nimport ToDoItem from '../data/ToDoItem';\r\n\r\nimport { StyledH1 } from './styles';\r\n\r\nconst Main = () => {\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [remindItems, setRemindItems] = useState([]);\r\n\r\n    const handleAdd = (text) => {\r\n        setItems(items => [new ToDoItem(text)].concat(items));\r\n    };\r\n\r\n    const handleChange = (id, newItem) => {\r\n        if (newItem) {\r\n            setItems(items => {\r\n                const index = items.findIndex((item) => (item.id() === id));\r\n                let newItems = [...items];\r\n                newItems[index] = newItem;\r\n                return newItems;\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleRemindFinished = (id, newItem) => {\r\n        setRemindItems(remindItems => remindItems.filter((item) => (item.id() !== id)));\r\n        handleChange(id, newItem);\r\n    };\r\n\r\n    const remindItemId = remindItems.length ? remindItems[0].id() : null;\r\n\r\n    return (\r\n        <>\r\n            <StyledH1>ToDo List</StyledH1>\r\n            <AddItem onAdd={handleAdd} />\r\n            <ItemList\r\n                items={items}\r\n                onChange={handleChange}\r\n                onRemind={setRemindItems}\r\n                remindItemId={remindItemId}\r\n                onRemindFinished={handleRemindFinished}\r\n            />\r\n            <ToastContainer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\n\nimport { GLOBAL_STYLE } from './components/styles';\n\nimport Main from './components/Main';\nimport * as serviceWorker from './serviceWorker';\n\nconst GlobalStyle = createGlobalStyle`\n    @import url('https://fonts.googleapis.com/css?family=Montserrat|Roboto');\n\n    body {\n        background: ${p => p.backgroundColor};\n        color: ${p => p.bodyColor};\n        padding: 0;\n        margin: 0;\n        font-weight: 500;\n        font-family: ${p => p.theme.fontFamily};\n    }\n\n    h1 {\n        font-family: Montserrat;\n    }\n`;\n\nconst theme = {\n    fontFamily: \"Montserrat\"\n};\n\nReactDOM.render(\n    (\n        <ThemeProvider theme={theme}>\n            <>\n                <GlobalStyle {...GLOBAL_STYLE} />\n                <Main />\n            </>\n        </ThemeProvider>\n    ),\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}